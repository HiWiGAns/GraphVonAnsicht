/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'lucas' at '6/24/16 9:44 AM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */

// In this section you declare the dependencies for your production and test code

allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'java'
    group = 'edu.kit.student.gans'
    version = '0.1.0'

	compileJava { 
	  options.encoding = "UTF-8" 
	}
    dependencies {
		// The production code uses the SLF4J logging API at compile time
		compile 'org.slf4j:slf4j-api:1.7.21'

		// Declare the dependency for your favourite test framework you want to use in your tests.
		// TestNG is also supported by the Gradle Test task. Just change the
		// testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
		// 'test.useTestNG()' to your build script.
		testCompile 'junit:junit:4.12'
    }
	// In this section you declare where to find the dependencies of your project
	repositories {
		// Use 'jcenter' for resolving your dependencies.
		// You can declare any Maven/Ivy/file repository here.
		jcenter()
	}
}
dependencies {
    compile project(":shared")
	compile project(":app")
    compile project(":plugins:sugiyama")
    compile project(":plugins:joana")
    compile project(":plugins:svg")
    compile project(":plugins:graphml")
}

subprojects.each { subproject -> evaluationDependsOn(subproject.path)}

private def mergeFiles(targetDir, fileTrees, relativePath) {
  // prepare the merge
  def mergedFile = new File("${targetDir}/${relativePath}")
  new File(mergedFile.parent).mkdirs()
 
  fileTrees*.matching({ include "**/${relativePath}" })*.each {
    mergedFile << it.bytes << "\n"
  }
}

task allJar(type: Jar, dependsOn: classes) {
    baseName = 'graphvonansicht'
    def mergeDir = "${buildDir}/merge"
    println mergeDir

    manifest {
        attributes 'Main-Class': 'edu.kit.student.gui.GAnsMediator'
    }

    subprojects.findAll {it.name != "plugins"}.each { subproject -> 
       from subproject.configurations.archives.allArtifacts.files.collect {
          zipTree(it)
       }
    }
    // might need a lazy var in a multi-module project where deps are inherited
    def runtimeDeps = configurations.runtime.collect { zipTree(it) }
    def myServiceConfig = 'META-INF/services/edu.kit.student.plugin.Plugin'
    
    doFirst {
        new File(mergeDir).delete()
        mergeFiles(mergeDir, runtimeDeps, myServiceConfig)
    }
 
    // this project's classes and all deps
    //from sourceSets*.classesDir
    from(runtimeDeps) {
        exclude myServiceConfig
    }
    from mergeDir
}
  
//artifacts {
//   archives allJar
//}

subprojects {
}